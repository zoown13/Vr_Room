<?xml version="1.0" encoding="utf-8"?>
<root
	xmlns:android="http://schemas.android.com/apk/res/android">

  <init>
    <setBoolFromProperty result="bDisableHmd6DofModule" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="disableHmd6DofModule" default="false"/>
    <setBoolFromProperty result="bDisableController6DofModule" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="disableController6DofModule" default="false"/>
    <setBoolFromProperty result="bEnableHomeKeyforCV" ini="Engine" section="/Script/PicoMobile.PicoMobileSettings" property="enableHomeKey" default="true"/>
  
  </init>

  <resourceCopies>
    <log text="Copying cvControllerClient.jar to staging"/>
    <copyFile src="$S(PluginDir)/../../Libs/cvControllerClient.jar"	dst="$S(BuildDir)/libs/cvControllerClient.jar" />
  </resourceCopies>

  <androidManifestUpdates>
    <addPermission android:name="android.permission.WRITE_SETTINGS"/>
    <addPermission android:name="android.permission.BLUETOOTH"/>
    <addPermission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <addPermission android:name="android.permission.INJECT_EVENTS"/>
  </androidManifestUpdates>

  <gameActivityImportAdditions>
    <insert>
      import com.picovr.cvclient.ButtonNum;
      import com.picovr.cvclient.CVControllerManager;
      import com.picovr.cvclient.CVControllerListener;
      import com.picovr.cvclient.CVController;
      import com.picovr.picovrlib.cvcontrollerclient.ControllerClient;
    </insert>
  </gameActivityImportAdditions>


  <gameActivityClassAdditions>
    <insert>
      public native void onNativeBindFail();
      public native void onNativeTreadStart();
      public native void onNativeMainControllerConnect();
      public native void onNativeMainControllerDisconnect();
      public native void onNativeSubControllerConnect();
      public native void onNativeSubControllerDisconnect();

      private CVControllerManager cvControllerManager = null;
      private CVController mainController = null;
      private CVController subController = null;

      private int configEnableHand6DofByHead;

      public int getNeoDeviceType()
      {
      int type=3;
      type=ControllerClient.getType();
      return type;
      }

      public void setMainArmJoint(int aj)
      {
      if(mainController!=null)
      {
      mainController.SetArmJoint(aj);//0-controller,1-wrist,2-elbow,3-shoulder
      }
      }

      public int getMainArmJoint()
      {
      if(mainController!=null)
      {
      return mainController.GetArmJoint();//0-controller,1-wrist,2-elbow,3-shoulder
      }
      else return 0;
      }

      public void setMainGazeType(int gt)
      {
      if(mainController!=null)
      {
      mainController.SetGazeType(gt);//0-Never,1-DuringMotion,2-Always
      }
      }

      public int getMainGazeType()
      {
      if(mainController!=null)
      {
      return mainController.GetGazeType();//0-Never,1-DuringMotion,2-Always
      }
      else return 1;
      }

      public void setMainArmModelParm(float eh,float ed, float pta)
      {
      if(mainController!=null)
      {
      mainController.SetArmModelParm(eh,ed,pta);
      }
      }

      public float[] getMainArmModelParm()
      {
      if(mainController!=null)
      return mainController.GetArmModelParm();
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public void setSubArmJoint(int aj)
      {
      if(subController!=null)
      {
      subController.SetArmJoint(aj);//0-controller,1-wrist,2-elbow,3-shoulder
      }
      }

      public int getSubArmJoint()
      {
      if(subController!=null)
      {
      return subController.GetArmJoint();//0-controller,1-wrist,2-elbow,3-shoulder
      }
      else return 0;
      }

      public void setSubGazeType(int gt)
      {
      if(subController!=null)
      {
      subController.SetGazeType(gt);//0-Never,1-DuringMotion,2-Always
      }
      }

      public int getSubGazeType()
      {
      if(subController!=null)
      {
      return subController.GetGazeType();//0-Never,1-DuringMotion,2-Always
      }
      else return 1;
      }

      public void setSubArmModelParm(float eh,float ed, float pta)
      {
      if(subController!=null)
      {
      subController.SetArmModelParm(eh,ed,pta);
      }
      }

      public float[] getSubArmModelParm()
      {
      if(subController!=null)
      return subController.GetArmModelParm();
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public int getMainControllerConnectState()
      {
      int state = 0;
      if(mainController!=null)
      {
      state = mainController.getConnectState();// 0-Disconnect,1-Connect
      }
      if(state == 1)
      {
      return 1;
      }else
      {
      return 0;
      }

      }

      public int getSubControllerConnectState() {
      int state = 0;
      if(subController!=null)
      {
      state = subController.getConnectState();// 0-Disconnect,1-Connect
      }
      if(state == 1)
      {
      return 1;
      }else
      {
      return 0;
      }
      }

      public int getMainControllerSerialNum() {
      if(mainController!=null)
      return mainController.getSerialNum();
      else return -1;
      }

      public int getSubControllerSerialNum() {
      if(subController!=null)
      return subController.getSerialNum();
      else return -1;
      }

      public int getMainController6DofAbility() {
      if(mainController!=null)
      return mainController.get6DofAbility();
      else return -1;
      }

      public int getSubController6DofAbility() {
      if(subController!=null)
      return subController.get6DofAbility();
      else return -1;
      }

      public boolean getMainControllerButtonState(int buttonNum) {
      if(mainController!=null)
      return mainController.getButtonState(ButtonNum.values()[buttonNum]);// 0-home,1-back,2-touchpad,3-volUp,4-volDown,5-buttonAX,6-buttonBY,7-buttonLG,8-buttonRG
      else return false;
      }

      public boolean getSubControllerButtonState(int buttonNum) {
      if(subController!=null)
      return subController.getButtonState(ButtonNum.values()[buttonNum]);// 0-home,1-back,2-touchpad,3-volUp,4-volDown
      else return false;
      }

      public int[] getCVControllerButtonEvent(int controller){
      if(cvControllerManager!=null)
      return cvControllerManager.getControllerKeyEventUEExt(controller);
      else return new int[]{0};
      }

      public int getMainControllerBatteryLevel() {
      if(mainController!=null)
      {
      return mainController.getBatteryLevel();
      }
      else return -1;
      }

      public int getSubControllerBatteryLevel() {
      if(subController!=null)
      {
      return subController.getBatteryLevel();
      }
      else return -1;
      }
      public float[] getMainControllerOrientation() {
      if(mainController!=null){
      return mainController.getOrientation();}
      else return new float[]{0.0f,0.0f,0.0f,0.0f};
      }

      public void getMainControllerOrientation(float[] orientation) {
      if(mainController!=null)
      orientation = mainController.getOrientation();
      }

      public float[] getSubControllerOrientation() {
      if(subController!=null){
      return subController.getOrientation();}
      else return new float[]{0.0f,0.0f,0.0f,0.0f};
      }

      public float[] getMainControllerPosition() {
      if (mainController != null) {
      float[] tempPosition;
      tempPosition = mainController.getPosition();
      if (Double.isNaN(tempPosition[0]) || Double.isNaN(tempPosition[1]) || Double.isNaN(tempPosition[2])) {
      tempPosition[0] = tempPosition[1] = tempPosition[2] = 0;
      Log.debug("Pvr_UE NeoControllerXML Position NaN!");
      }
      return tempPosition;
      } else return new float[]{0.0f, 0.0f, 0.0f};
      }

      public float[] getSubControllerPosition() {
      if (subController != null) {
      float[] tempPosition;
      tempPosition = subController.getPosition();
      if (Double.isNaN(tempPosition[0]) || Double.isNaN(tempPosition[1]) || Double.isNaN(tempPosition[2])) {
      tempPosition[0] = tempPosition[1] = tempPosition[2] = 0;
      }
      return tempPosition;
      } else return new float[]{0.0f, 0.0f, 0.0f};
      }

      public float[] getMainControllerAcc() {
      if(mainController!=null)
      return mainController.getAcc();// x,y,z
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public float[] getSubControllerAcc() {
      if(subController!=null)
      return subController.getAcc();// x,y,z
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public float[] getMainControllerAgl() {
      if(mainController!=null)
      return mainController.getAgl();// x,y,z
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public float[] getSubControllerAgl() {
      if(subController!=null)
      return subController.getAgl();// x,y,z
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public float[] getLeftLinearVelocity(){
      if(mainController!=null)
      return ControllerClient.getControllerLinearVelocity(0);
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public float[] getRightLinearVelocity(){
      if(subController!=null)
      return ControllerClient.getControllerLinearVelocity(1);
      else return new float[]{0.0f,0.0f,0.0f};
      }

      public int getMainControllerTriggerNum() {
      if(mainController!=null)
      return mainController.getTriggerNum();// 0-255
      else return -1;
      }

      public int getSubControllerTriggerNum() {
      if(subController!=null)
      return subController.getTriggerNum();// 0-255
      else return -1;
      }

      public int[] getMainControllerTouchPad() {
      if(mainController!=null)
      return mainController.getTouchPad();// int[2],x,y
      else return new int[]{0,0};
      }

      public int[] getSubControllerTouchPad() {
      if(subController!=null)
      return subController.getTouchPad();// int[2],x,y
      else return new int[]{0,0};
      }

      public void shakeMainController(){
      if(mainController!=null)
      ControllerClient.vibrateControllerStrength(mainController.getSerialNum(), 255);
      }

      public void shakeSubController(){
      if(subController!=null)
      ControllerClient.vibrateControllerStrength(subController.getSerialNum(), 255);
      }

      public void shakeCV2Controller(float strength,int time,int hand){     //0-1 0-65535 0or1
      if(mainController!=null || subController!=null)
      ControllerClient.vibrateCV2ControllerStrength(strength,time,hand);
      }
	  
	    public float[] getLeftControllerFixedSensorState(){
      if(mainController!=null)
      return ControllerClient.getControllerFixedSensorState(0);
      else return new float[]{0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f};
      }
	  
      public float[] getRightControllerFixedSensorState(){
      if(subController!=null)
      return ControllerClient.getControllerFixedSensorState(1);
      else return new float[]{0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,0.0f};
      }

      public int getMainControllerValue(){
      if(mainController!=null || subController!=null)
      return ControllerClient.getMainControllerIndex();
      return 0;
      }

    </insert>

    <if condition="bDisableHmd6DofModule">
      <false>
        <if condition="bDisableController6DofModule">
          <false>
            <!-- head-6, hand-6 -->
            <insert>
              public void configureDof(){
               if(cvControllerManager!=null)
              cvControllerManager.enable6Dof(true,true);
              }
            </insert>
          </false>
          <true>
            <!-- head-6, hand-3 -->
            <insert>
              public void configureDof(){
               if(cvControllerManager!=null)
              cvControllerManager.enable6Dof(true,false);
              }
            </insert>
          </true>
        </if>
      </false>
      <true>
        <if condition="bDisableController6DofModule">
          <false>
            <!-- head-3, hand-6 -->
            <insert>
              public void configureDof(){
               if(cvControllerManager!=null)
              cvControllerManager.enable6Dof(false,true);
              }
            </insert>
          </false>
          <true>
            <!-- head-3, hand-3 -->
            <insert>
              public void configureDof(){
               if(cvControllerManager!=null)
              cvControllerManager.enable6Dof(false,false);
              }
            </insert>
          </true>
        </if>
      </true>
    </if>
    
    <if condition="bEnableHomeKeyforCV">
      <true>
        <insert>
          public void configureHomeKeyforCV(){
          if(cvControllerManager!=null){
          cvControllerManager.SetIsEnbleHomeKey(true);
          Log.debug("Pvr_UE NeoControllerXML  setIsEnbleHomeKey:true");   }
          }
        </insert>
      </true>
      <false>
        <insert>
          public void configureHomeKeyforCV(){
           if(cvControllerManager!=null){
          cvControllerManager.SetIsEnbleHomeKey(false);
          Log.debug("Pvr_UE NeoControllerXML  setIsEnbleHomeKey:false");}
          }
        </insert>
      </false>
    </if>

    <insert>
      public void resetHomeKeyforCV(){
     if(cvControllerManager!=null){
      cvControllerManager.SetIsEnbleHomeKey(true);
      Log.debug("Pvr_UE NeoControllerXML setIsEnbleHomeKey:true");}
      }
      
      public void StartControllerThread()
      {
        if(cvControllerManager!=null)  
        {
          cvControllerManager.startControllerThread();
        }
      }
    </insert>
  
  </gameActivityClassAdditions>


  <gameActivityOnCreateAdditions>
    <insert>
      configint = picovrsdk.getIntConfig(26); //0:default hb 1:hb 2:cv 3:all
      configEnableHand6DofByHead = picovrsdk.getIntConfig(29);
      String trackmode = vractivity.getSysprop("persist.pvr.sdk.trackingmode");
      try
      {
      sysprop = Integer.parseInt(trackmode);
      }
      catch(Exception e)
      {
      sysprop = 0;
      }
      
      if(configint == 4 || configint==2||(configint==3&amp;&amp;sysprop!=1))
      {
      cvControllerManager = new CVControllerManager(this.getApplicationContext());
      mainController = cvControllerManager.getMainController();
      subController = cvControllerManager.getSubController();
      if(configEnableHand6DofByHead == 0){
      mainController.useHeadSensor = false;
      subController.useHeadSensor = false;
      }
      else
      {
      mainController.useHeadSensor = true;
      subController.useHeadSensor = true;
      }
      cvControllerManager.setListener(new CVControllerListener() {
      @Override
      public void onBindSuccess() {
      ControllerClient.setUnityVersion("2.8.0.1");   //
      }

      @Override
      public void onBindFail() {
      onNativeBindFail();
      }

      @Override
      public void onThreadStart() {
      onNativeTreadStart();

      ControllerClient.setUnityVersion("2.8.0.1");   //

      mainController = cvControllerManager.getMainController();
      subController = cvControllerManager.getSubController();
      
      mainController.updateConnectState();
      subController.updateConnectState();
      }

      @Override
      public void onConnectStateChanged(int serialNum, int state) {
      
      if (serialNum == mainController.getSerialNum()) {
      if (state == 0) {
      onNativeMainControllerDisconnect();
      } else {
      onNativeMainControllerConnect();
      }
      } else {
      if (state == 0) {
      onNativeSubControllerDisconnect();
      } else {
      onNativeSubControllerConnect();
      }
      }
      }

      @Override
      public void onMainControllerChanged(int serialNum) {
      mainController = cvControllerManager.getMainController();
      subController = cvControllerManager.getSubController();
      Log.debug("Pvr_UE NeoControllerXML : MainControllerChanged");
      }

      @Override
      public void onChannelChanged(int device,int channel){
      }

      });
      configureDof();
      }

    </insert>
  </gameActivityOnCreateAdditions>


  <gameActivityOnStartAdditions>
    <insert>
      if(configint == 4 || configint==2||(configint==3&amp;&amp;sysprop!=1))
      {
      
      new Timer().schedule(new TimerTask() {
      public void run() {
      configureHomeKeyforCV();
      }
      }, 500);
      }
    </insert>
  </gameActivityOnStartAdditions>


  <gameActivityOnResumeAdditions>
    <insert>

      if(configint == 4 || configint==2||(configint==3&amp;&amp;sysprop!=1))
      {
      cvControllerManager.bindService();
      
      int handNess = vrActivity.getPvrHandness(this);
      PicovrSDK.setArmModelParameter(handNess, 2, 0.0f, 0.0f, 15);
      }

      if(cvControllerManager!=null)  {
      cvControllerManager.startControllerThread();

      mainController = cvControllerManager.getMainController();
      subController = cvControllerManager.getSubController();

      //UpdataMainController

      if(mainController.getConnectState() != 1)
      {
      onNativeMainControllerDisconnect();

      }else if(mainController.getConnectState() == 1)
      {
      onNativeMainControllerConnect();

      }

      //UpdataSubController
      if(subController.getConnectState() != 1)
      {
      onNativeSubControllerDisconnect();

      }else if(subController.getConnectState() == 1)
      {
      onNativeSubControllerConnect();


      }
      }

    </insert>
  </gameActivityOnResumeAdditions>


  <gameActivityOnPauseAdditions>
    <insert>
      if(cvControllerManager!=null)  {
      cvControllerManager.stopControllerThread();
      cvControllerManager.unbindService();
      }
    </insert>
  </gameActivityOnPauseAdditions>


  <gameActivityOnStopAdditions>
    <insert>
      if(configint == 4 || configint==2||(configint==3&amp;&amp;sysprop!=1))
      {
      resetHomeKeyforCV();
      }
    </insert>
  </gameActivityOnStopAdditions>


  <gameActivityOnDestroyAdditions>
    <insert>
    </insert>
  </gameActivityOnDestroyAdditions>

</root>